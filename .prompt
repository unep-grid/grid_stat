# HT Portal Project

## Context

Part of a large refactor migrating from V1 api to V2 and custom meilisearch end point. The user select an indicator and the various visualisation update accordingly after the values fetch from the api

### Project Overview
The GHG Portal is a web application for visualizing greenhouse gas emissions data through interactive maps, charts, and data tables.

### Technical Stack
- Framework: Astro.js + React
- UI: Tailwind + shadcn/ui
- Data Visualization: D3.js
- Maps: D3-geo
- Search: Meilisearch
- Testing: Vitest

### Data Structure
- Indicators contain metadata and time series data. Example in ./sample/indicator_example.json
- Geographic entities are linked to regions. The topojson of the world (example in .sample/world-110m_head.json) contain attribute 'id' that represent iso3 code. The api return geo_entity_id that is maped with the iso3 using src/lib/utils/geo_entities.json 
- Data includes measure_scale property for visualization type. Allowed measure scales are listed in ./sample/measure_scales.json 
- Temporal data spans multiple years

### API Information
1. Meilisearch:
   - Endpoint: https://api-search.unepgrid.ch
   - Index format: statistical_{language}
   - Facets: collections.name, keywords

2. V2 API:
   - Endpoint: https://api.unepgrid.ch/stats/v2
   - Data endpoint: /indicators/{id}/data

## Tasks

### Current Focus: Map Visualization Enhancement

#### 1. Color Scale and Visualization Type Refactor
- [ ] Implement smart color scale selection based on measure_scale
- [ ] Implement statistical methods for binning
  - Add support for quantiles using d3 scale system
  - Add support for Jenks natural breaks when highly skewed data
  - Select method based on data distribution
- [ ] Implement diverging/sequential color palette selection
  - Use measure_scale to determine appropriate palette
  - Handle positive/negative value ranges
  - Consider colorblind-friendly options

#### 2. Map Visualization Types
- [ ] Update proper visualization type selection
  - Replace hardcoded useChoropleth with measure_scale based logic
  - Handle support for proportional symbols
  - Consider additional visualization types based on measure_scale
