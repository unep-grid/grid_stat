# GHG Portal Project

## Context

### Project Overview
The GHG Portal is a web application for visualizing greenhouse gas emissions data through interactive maps, charts, and data tables.

### Technical Stack
- Framework: Astro.js + React
- UI: Tailwind + shadcn/ui
- Data Visualization: D3.js
- Maps: D3-geo
- Search: Meilisearch
- Testing: Vitest

### Data Structure
- Indicators contain metadata and time series data
- Geographic entities are linked to regions
- Data includes measure_scale property for visualization type
- Temporal data spans multiple years

### API Information
1. Meilisearch:
   - Endpoint: https://api-search.unepgrid.ch
   - Index format: statistical_{language}
   - Facets: collections.name, keywords

2. V2 API:
   - Endpoint: https://api.unepgrid.ch/stats/v2
   - Data endpoint: /indicators/{id}/data

## Tasks

### Current Focus: Map Visualization Enhancement

#### 1. Color Scale and Visualization Type Refactor
- [ ] Implement smart color scale selection based on measure_scale
  - Use palettes.json for mapping scales to visualization types
  - Support scales: ordinal, nominal, interval, ratio_count, ratio_index
- [ ] Implement statistical methods for binning
  - Add support for quantiles
  - Add support for Jenks natural breaks
  - Select method based on data distribution
- [ ] Implement diverging/sequential color palette selection
  - Use measure_scale to determine appropriate palette
  - Handle positive/negative value ranges
  - Consider colorblind-friendly options

#### 2. Map Visualization Types
- [ ] Implement proper visualization type selection
  - Replace hardcoded useChoropleth with measure_scale based logic
  - Add support for proportional symbols
  - Consider additional visualization types based on measure_scale

### Upcoming Tasks

#### UI Enhancement
- Improve overall user experience
- Ensure consistent styling
- Implement responsive design patterns
- Enhance accessibility features
- Optimize component interactions

#### Cartography Design
- Implement advanced map projections
- Design effective color schemes
- Create intuitive legends
- Optimize map performance
- Implement smooth transitions

## Development Guidelines
1. Use TypeScript for all components
2. Follow React best practices
3. Implement unit tests
4. Maintain consistent code formatting
5. Document complex logic
6. Ensure proper error handling
7. Follow accessibility guidelines
